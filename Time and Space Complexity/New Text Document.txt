Understanding Time and Space Complexity.

Time Complexity:(!Time Complexity=Execution of Time)
There is a wrong thinking about the time Complexity that is the total time of an program executaton time is the Time Complexity of that program, but the real scenerio is diffrent. Now a days super computers are available they can easily run big programs in just few miliseconds which local computers can take hours, so this executaton time is actually depending on the computers configaration.
So what is the time complexity then   

Time Complexity - "In a Program how many time a single statement will run" it means its Time Complexity. 

Suppose, in one of our program we have one loop, so its time complexity will be calculated based on how many times this loop has executed not how many time this code take for executaton.

//////////////////////////////////////


for(let i = 0; i < 10; i++){
    console.log(i);
}


////////////////////////////////////

Now how a time complexity actually calculate?

Mainly based on two operations we can caltulate the time complexity. First one is Arithmatic Operation and the other is Arithmatic Operation.

1. Assignment — When we assign any value to a variable time complexity count. suppose var a = 10, var b = 20, var c = a+b. Here in three variables three data has been stored. Like here in every assignment time complexity will calculate. 

2. Arithmatic Operation — In a program if any arithmatic operation occure like (+, -, *, /) then TC calculation comes into play, for example c = a+b here one arithmatic operation occure and this TC calculate.

How many times this two options(Assignment, Arithmatic) execute is count on to calculate TC.

During Time complexity calculation some value or process need to avoid because these don't have any impact on TC calculation graph —

Lets understand this with clear example:

1. Constant value must avoid. (explained it in bellow eith example)

2. No need to count the auxiliary code for example console.log(). console.log is only used to print or display code. Function invocation also not need to count.




Time Complexity counting with Examples:-

Time complexity calculate with 3 diffrent Asymptotic Notation. These are: 

1.Big-O Notation (O-notation)
— It provides the worst-case complexity of the algorithm.

2.Omega Notation (Ω-notation) —
— It provides the best-case complexity of an algorithm.

3.Theta Notation (Θ-notation)
— It provides the average-case complexity of an algorithm.


In softwar deveopment maximum time we use Big-O Notation (O-notation) to calculate the worst-case complexity of an algorithm.


////////////////////////////////////


var a = 10; 
var b = 20;
var c = a+b;


////////////////////////////////////

Now avobe we can see 3 variable assignment. We consider each assignment as O(1), according to that we have -


var a = 10 consider as — O(1),

var b = 20 consider as — O(1),

var c = a+b consider as — O(1)

so,

O(1) + O(1) + O(1)

= O(3) (We can consider it as O(3 *1) )

= O(1) (explanation: As here has 3 constant so during Time Complexity calculation every Constant consider as 1.

So for avobe Program Time Complexity will be — O(1) Or, Big O(1).

Here, if O(1000) also then we consider it as O(1) , because Constant heve to consider as (1).


////////////////////////////////////

Example: 1

= O(100 * n)
= O(1 * n)
= O(n)

////////////////////////////////////


In avobe first example 100 is considered as 1 because 100 is constant value. Here 100 value equivalant to 100 and "n" is a variable(চলক), the value of "n"
is changeable here. This variable value can be anything so, during the Time Complexity calculation need to avoid constant value.


ধরি আমাদের এমন একটা program আছে যার Time Complexity O(2n), যেটাকে আমরা Order of n বা O(n) লিখতে পারি। এখন O(n) 
এর জন্য একটা গ্রাফ নিচে দেয়া হল। যেখানে —

Why its so important to avoid Constant value?
Suppose in one of our program the Time Complexity O(2n), so we can write it Order of n OR O(n). Now for O(n) one graph has given bellow

////////////////////////////////////
Graph-1
////////////////////////////////////

 
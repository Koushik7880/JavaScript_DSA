Understanding Time and Space Complexity.

Time Complexity:(!Time Complexity=Execution of Time)
There is a wrong thinking about the time Complexity that is the total time of an program executaton time is the Time Complexity of that program, but the real scenerio is diffrent. Now a days super computers are available they can easily run big programs in just few miliseconds which local computers can take hours, so this executaton time is actually depending on the computers configaration.
So what is the time complexity then   

Time Complexity - "In a Program how many time a single statement will run" it means its Time Complexity. 

Suppose, in one of our program we have one loop, so its time complexity will be calculated based on how many times this loop has executed not how many time this code take for executaton.

//////////////////////////////////////


for(let i = 0; i < 10; i++){
    console.log(i);
}


////////////////////////////////////

Now how a time complexity actually calculate?

Mainly based on two operations we can caltulate the time complexity. First one is Arithmatic Operation and the other is Arithmatic Operation.

1. Assignment — When we assign any value to a variable time complexity count. suppose var a = 10, var b = 20, var c = a+b. Here in three variables three data has been stored. Like here in every assignment time complexity will calculate. 

2. Arithmatic Operation — In a program if any arithmatic operation occure like (+, -, *, /) then TC calculation comes into play, for example c = a+b here one arithmatic operation occure and this TC calculate.

How many times this two options(Assignment, Arithmatic) execute is count on to calculate TC.

During Time complexity calculation some value or process need to avoid because these don't have any impact on TC calculation graph —

Lets understand this with clear example:

1. Constant value must avoid. (explained it in bellow eith example)

2. No need to count the auxiliary code for example console.log(). console.log is only used to print or display code. Function invocation also not need to count.




Time Complexity counting with Examples:-

Time complexity calculate with 3 diffrent Asymptotic Notation. These are: 

1.Big-O Notation (O-notation)
— It provides the worst-case complexity of the algorithm.

2.Omega Notation (Ω-notation) —
— It provides the best-case complexity of an algorithm.

3.Theta Notation (Θ-notation)
— It provides the average-case complexity of an algorithm.


In softwar deveopment maximum time we use Big-O Notation (O-notation) to calculate the worst-case complexity of an algorithm.


////////////////////////////////////


var a = 10; 
var b = 20;
var c = a+b;


////////////////////////////////////

Now avobe we can see 3 variable assignment. We consider each assignment as O(1), according to that we have -


var a = 10 consider as — O(1),

var b = 20 consider as — O(1),

var c = a+b consider as — O(1)

so,

O(1) + O(1) + O(1)

= O(3) (We can consider it as O(3 *1) )

= O(1) (explanation: As here has 3 constant so during Time Complexity calculation every Constant consider as 1.

So for avobe Program Time Complexity will be — O(1) Or, Big O(1).

Here, if O(1000) also then we consider it as O(1) , because Constant heve to consider as (1).


////////////////////////////////////

Example: 1

= O(100 * n)
= O(1 * n)
= O(n)

////////////////////////////////////


In avobe first example 100 is considered as 1 because 100 is constant value. Here 100 value equivalant to 100 and "n" is a variable(চলক), the value of "n"
is changeable here. This variable value can be anything so, during the Time Complexity calculation need to avoid constant value.


Why its so important to avoid Constant value?
Suppose in one of our program the Time Complexity O(2n), so we can write it Order of n OR O(n). Now for O(n) one graph has given bellow

////////////////////////////////////
Graph-1
////////////////////////////////////



Here, in X axis we show Data OR N, and in Y axis showing the number of loop. Suppose we execute a for loop where value of n is equal to the total number of loop executaton. According to the graph if n = 1 then the loop will execute one time, if n = 2 loop will execute 2 times, if n = 3 loop will execute 3 times, like that if n = 9 loop will execute 9 times.

Here in the graph we see an upwords(উর্ধ্মুখী) line which is called Linear Time Complexity.

Now for O(2n) lets see the 2nd graph -

////////////////////////////////////
Graph-2
////////////////////////////////////

Here, also in X axis we show Data OR N, and in Y axis showing the number of loop. Suppose we execute a for loop where number of loop executaton will doubel then value of n. According to the graph if n = 1 then the loop will execute 2 time, if n = 2 loop will execute 4 times, if n = 3 loop will execute 6 times, like that if n = 6 loop will execute 12 times.

Here also in the graph we see an upwords(উর্ধ্মুখী) line moving ahead linearly which is also called Linear Time Complexity.

Only for this reason we avoid constant value, its not depend on the size of that constant value. Constant value doesnot have any effect on graph, thats why no need to count the constant value and we avoid it. So O(2n), O(100n) all are same in both case we write O(n) as Time Complexity.  

Examples:
////////////////////////////////////
let arr = [1,2,3,4,5]
let target = 1

for(let i = 0; i <= arr.length; i++){
    if (arr[i] === target) {
        console.log(arr[i]);
    }
}
////////////////////////////////////

Suppose we have an Array and a Target value, for this program Time Complexity will be O(n). Because -

This loop will execute 5 time, because here value is equal to the total number of loop executaton. That's why value is denoted by n, here 'n'(চলক) is changeable, n can be increase or decrease its not constant at all.

After first loop executaton we get our target than why TC will be O(n)? 

After one time loop executaton if target data found than it will be best-case complexity of an algorithm, it called Omega Notation also. And if target value found in middle or of target = 3 than it will be average-case complexity of an algorithm OR Theta Notation (Θ-notation).

As we will calculate worst-case complexity so, the time complexity for upper program will be
O(n). So how many time the loop execute it will depend on the value of n.



Example 2 :
////////////////////////////////////
for(let i = 0; i <= arr.length; i++){
    
        console.log(i);
    
}

while (true) {
    
}
////////////////////////////////////\

Now suppose here in this program two loop execute one after another. So for 1st loop time complexity will be O(n) and for 2nd loop ime complexity will be O(n),

then O(n) + O(n) = O(2n) OR O(n)। Here 2 constant, so must 2 avoid.

Example 3:
////////////////////////////////////\
for (let i = 0; i <= arr.length; i++) {
  for (let j = 0; j < arr.length; j++) {
    
  }
}

////////////////////////////////////\

Suppose here we have 2 nested loop so, for 1st loop TC will be O(n) and for 2nd Time Complexity will be O(n), so O(n) * O(n) = O(n²). As because its a nested loop so here multiplation need.



If number of nested loop is 3 then-

= O(n) * O(n) * O(n)

= O(n*n*n)

= O(n³)

Note:
1. For two Nested Loop if input value is ‘n’ and ‘m’ then Time Complexity will be -

= O(n*m)

=O(nm)

2. For three Nested Loop if input value is ’a’ , ‘b’ and ‘c’ then Time Complexity will be -

= O(a*b*c)

= O(abc)

3. For three Nested Loop if input value is ’a’ , ‘b’ and ‘a’ then Time Complexity will be - 

= O(a*b*a)

= O(a²b)

Example 5:
////////////////////////////////////\

for (let i = 0; i <= arr.length; i++) {
  for (let j = 0; j < arr.length; j++) {
  }
}
while(){
}

////////////////////////////////////\


In upwords program we can see that there is two loop in a nested loop and one seperate loop outside of this nested loop. So here the time complexity will be - 

= O(n²) + O(n)

= O(n²)

If we notice upwords T.C we can see that we avoid the value of the last loop.

From uppar T.C we can see we avoided the last loop value because, in a program between two program we only consider the bigger value. Its a basic rules of T.C  

Example 6:
= O(n² + n)

= O(n²) (Avoid the small value)

Example 7:
= O(5n⁴ + 10n³ + n² + 2n + 100)

= O(n⁴+ n³ + n² + n ) — — — →[avoid constant]

= O(n⁴) — — — →[avoid small value]


Calculating Time Complexity in Binary Search:
Binary Search Time Complexity is O(logn). In binary search its doesn't matter how much big data set or array is given to the program, every time after a loop execution the array devided into half in this way number of loop executaton redused in massive number. Suppose in 100 coror data if we apply binary search
only 27-28 loop executaton need to masure the worst time complexity. 

Example:- 

100cr --> 50cr --> 25cr --> 12cr --> 6cr --> 3cr --> 1cr -->
50lakh --> 25lakh --> 12lakh --> 6lakh --> 3lakh --> 1lakh -->
50k --> 25k --> 12k --> 6k --> 3k --> 1k --> 500 --> 250 -->
120 --> 60 --> 30 --> 15 --> 7 --> 3 --> 1

From 100 coror devided into 50 coror then devided into 25 coror like that it comes to 1. Here total loop will be 28-30 only. Thats why its said that logarithom used program T.C is best then others. Binary Search
reduce Time Complexity in 'n' rate.


Space Complexity.
To execute a program how much space is required is called space complexity. In this stage of Space Complexity we will analysis worst space complexity.
It could be either O(1) or O(n).


////////////////////////////////////
var a = 10
var b = 20
var c = a+b
////////////////////////////////////
In upper example 3 variable has taken, for each variable Space Complexity will be - 

O(1) + O(1) + O(1)

= O(3)

= O(1)

As here we can see 3 constant value so 3 need to avoid, so this programs time complexity will be Order of 1 OR O(1).

////////////////////////////////////
 array = [10,20,30,40,50,60]
 ////////////////////////////////////

Here the Space Complexity of this array will be O(n), because in a program the space depends on the amount or size of value in array. Suppose for value 10 space will be 10, for 20 space will be 20. Like this way for every data one spach alocate, that why its space complexity will be O(n). Here n = length of the array. The array of length and how much space it will take it depends on value of 'n'. 


 
//////////////////////////////////
let n = [10,20,30,40,50,60]
while(){
if(){
will check condition here
}
}
/////////////////////////////
Suppose we have an Array, in this array we will execute loop & check conditions, so what will be its Space Complexitry?

It will be O(n) because, here space will allocate for array length. So Space Complexitry will be Order of n OR O(n).


What is Space Complexity of Binary Search?

Suppose for Binary Search there is a given array, we have to execute the operation. So for Binary Search Space Complexitry will be O(1). Let me explain with some code:


/////////////////////////////

/////////////////////////////


In the upper function has an array. Here we have to find the target by applying Binary Search -


/////////////////////////////
let start = 0,
let end = arr.length - 1
let mid;
/////////////////////////////


Here we have 3 variables. So, here Space Complexity will be -

O(1) + O(1) + O(1)

= O(3) বা O(3*1)

=O(1)

Here only these variable declared no other executaton occure. Array has already been giveb, thats why in Binary Search Space Complexity is O(1).
And Time Complexitry O(logn).  


Space Complexity of Nested Array:
[
 [1,2,3,4],
 [5,6,7,8],
 [9,0,1,2],
 [3,4,5,6],
]
Suppose we have a Parent Array and inside it more 3 array exist. This type of Nested Array called matrix. So what will be the space complexity of this type of array?

If we calculate in general for Parent Array will be O(n), and for 4 others more 4 O(n).


= O(n) * (O(n) + O(n) + O(n) +O(n) )

= O(n) * O(4n) →[4 constant so avoid it]

= O(n) * O(n)

= O(n²)

As its a matrix so its neet to consider as Row and Column. so -


[
 [1,2,3,4],
 [5,6,7,8],
 [9,0,1,2],
 [3,4,5,6],
]
4 Row = O(n), 4 Column = O(n);

so, = O(n) * O(n)

= O(n²)